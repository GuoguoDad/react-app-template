{"version":3,"file":"880.dll.62d286.js","mappings":"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","sources":["webpack://[name]/./node_modules/ionicons/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.10.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["_polyfillHost","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","commentOriginalSelector","map","shallowPart","scopeSelector","re","makeScopeMatcher","test","selectorNeedsScoping","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","applyStrictSelectorScope","scopeCss","scopeId","hostScopeId","slotScopeId","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCssText","forEach"],"sourceRoot":""}